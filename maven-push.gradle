/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getPomGroup() {
    return hasProperty('GROUP') ? GROUP : group
}

def getPomArtifactId() {
    return hasProperty('POM_ARTIFACT_ID') ? POM_ARTIFACT_ID : project.name
}

def getPomVersion() {
    return hasProperty('VERSION_NAME') ? VERSION_NAME : version
}

def getPomName() {
    return hasProperty('POM_NAME') ? POM_NAME : getPomArtifactId()
}

def getPomPackaging() {
    return hasProperty('POM_PACKAGING') ? POM_PACKAGING : 'jar'
}

def getPomDescription() {
    return hasProperty('POM_DESCRIPTION') ? POM_DESCRIPTION : 'system information getter and support rmi server'
}

def getPomUrl() {
    return hasProperty('POM_URL') ? POM_URL : ''
}

def getPomScmUrl() {
    return hasProperty('POM_SCM_URL') ? POM_SCM_URL : ''
}

def getPomScmConnectionUrl() {
    return hasProperty('POM_SCM_CONNECTION') ? POM_SCM_CONNECTION : ''
}

def getPomScmDevConnectionUrl() {
    return hasProperty('POM_SCM_DEV_CONNECTION') ? POM_SCM_DEV_CONNECTION : ''
}

def getPomLicenseName() {
    return hasProperty('POM_LICENCE_NAME') ? POM_LICENCE_NAME : 'The Apache Software License, Version 2.0'
}

def getPomLicenseUrl() {
    return hasProperty('POM_LICENCE_URL') ? POM_LICENCE_URL : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
}

def getPomLicenseDist() {
    return hasProperty('POM_LICENCE_DIST') ? POM_LICENCE_DIST : 'repo'
}

def getPomDeveloperId() {
    return hasProperty('POM_DEVELOPER_ID') ? POM_DEVELOPER_ID : 'jondoe'
}

def getPomDeveloperName() {
    return hasProperty('POM_DEVELOPER_NAME') ? POM_DEVELOPER_NAME : 'jondoe'
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = getPomGroup()
                pom.artifactId = getPomArtifactId()
                pom.version = getPomVersion()

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name getPomName()
                    packaging getPomPackaging()
                    description getPomDescription()
                    url getPomUrl()

                    scm {
                        url getPomScmUrl()
                        connection getPomScmConnectionUrl()
                        developerConnection getPomScmDevConnectionUrl()
                    }

                    licenses {
                        license {
                            name getPomLicenseName()
                            url getPomLicenseUrl()
                            distribution getPomLicenseDist()
                        }
                    }

                    developers {
                        developer {
                            id getPomDeveloperId()
                            name getPomDeveloperName()
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}